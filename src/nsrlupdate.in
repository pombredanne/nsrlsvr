#!/usr/bin/env python
# coding=UTF-8

"""This app populates a new nsrlsvr hash file from an RDS."""

from __future__ import print_function, unicode_literals
from re import compile as re_compile
from os import sep, unlink, makedirs
from os.path import exists, isdir, join as pjoin
from sys import argv, version_info
from errno import EEXIST


def process_rds(filename):
    """Processes an RDS."""
    (major, minor, micro, release, serial) = version_info

    def my_mkdir(path):
        """mkdir -p functionality."""
        # Python 3.2 and later are much nicer than 2.7-3.1.
        if major == 3 and minor >= 2:
            makedirs(path, exist_ok=True)
        else:
            try:
                makedirs(path)
            except OSError as osexc:
                if osexc.errno == EEXIST and isdir(path):
                    pass
                else:
                    raise

    def open_fh(fn):
        if major == 2:
            return open(fn, "r")
        else:
            return open(fn, "r", errors="replace", encoding="ISO-8859-1")

    def unicodify(line):
        if major == 2:
            return unicode(line, errors="replace", encoding="ISO-8859-1")
        else:
            return line

    try:
        my_mkdir("${PKGDATADIR}")
        with open_fh(filename) as fh:
            with open(pjoin("${PKGDATADIR}", "hashes.txt"), "w") as out:
                md5re = re_compile(r'^"?([A-F0-9]{32})"?$')
                line = unicodify(fh.readline())
                while line:
                    cols = line.split(",")
                    if len(cols) > 2:
                        match = md5re.match(cols[1])
                        if match:
                            md5 = match.group(1) + "\n"
                            out.write(md5)
                    line = unicodify(fh.readline())

    except IOError:
        print("""I/O error while trying to process """ + filename)
        print(
            """(This is normally caused by one of two things: either you're out of disk
space, or you lack privileges to write to ${PKGDATADIR}/hashes.txt file.)""")

if __name__ == '__main__':
    if len(argv) != 2 or not exists(argv[1]):
        print("Usage: nsrlupdate <path-to-NSRLFile.txt>")
    else:
        process_rds(argv[1])
